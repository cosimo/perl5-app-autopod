package App::autopod;

use warnings;
use strict;
use File::Spec;
use IO::Scalar;

our $VERSION = '0.01';

sub default_template_fh {

	my $content = q~
=pod

=head1 NAME

__CLASS__ - My shiny new class FTW FTW!

=head1 SYNOPSIS

Fill in the synopsis of __CLASS__

=head1 DESCRIPTION

Fill in the description of __CLASS__ 

=head1 SUBROUTINES/METHODS

=head2 AUTOGENERATED FUNCTIONS

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
You have to move the following functions to class or instance sections
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

__FUNCTIONS__

=head2 CLASS METHODS

=head3 C<new( [\%args] )>

Class constructor. Describe optional mandatory or
additional arguments if any.

If there's missing or invalid arguments, it returns
an undefined value.

Example:

    my $obj = __CLASS__->new();

=head2 INSTANCE METHODS

=head3 C<some_method($arg1, $arg2, ...)>

Accelerates to warp speed.

C<$arg1> is the acceleration factor.
C<$arg2> is the warp target speed.

Returns a boolean value that tells you if the
acceleration is possible or not.

=head1 BUGS AND LIMITATIONS

=head1 SEE ALSO

Other stuff to be looked into...

=over 4

=item * this

=item * that

=back

=head1 AUTHOR

__FULLNAME__, E<lt>__USER__@domain.localE<gt>

=head1 LICENSE AND COPYRIGHT

Copyright (c), __YEAR__ __FULLNAME__
All rights reserved.

~;

	return IO::Scalar->new(\$content);

}

sub open_template {
    my ($file) = @_;

    my $found = 0;
    my $fh;

    for my $try_dir
    (".", $ENV{HOME}, "$ENV{HOME}/.autopod/templates", "/usr/share/autopod/templates", "/etc/autopod/templates")
    {
        my $path = File::Spec->catfile($try_dir, $file);

        # Try both .pod and no-extension
        open $fh, '<', "$path.pod"
            and $found = $fh
            and last;

        open $fh, '<', $path
            and $found = $fh
            and last;

    }

    unless ($found) {
        die "Can't file template file $file: $!\n";
    }

    return $fh;
}

sub get_class {
    my ($file) = $_;

    if (! $file) { return }

    my $cmd = q(egrep '^\s*package\s*' __FILE__ | awk '{ print $2 }' 2>/dev/null);
    $cmd =~ s{__FILE__}{$file};
    my @out = `$cmd`;
    my $class = $out[0];

    if ($class =~ m{^ \s* ([\w:]+) \s* ;? }mx) {
        $class = $1;
    }
    return $class;
}

sub get_class_from_source {
    my (@content) = @_;
    return unless @content;

	# You can pass lines with/without final "\n"
	my $text = join("\n", @content);
	@content = split(m{[\r\n]+}m, $text);
	my $class;

	for (@content) {
		if ($_ =~ m{^ \s* package \s+}x) {
			$class = $_;
			last;
		}
	}

	if (defined $class and $class =~ m{^ \s* package \s+ ([\w:]+) \s* ;? }mx) {
        $class = $1;
    }

    return $class;
}

sub get_subs {
    my $file = $_;
    if (! $file) { return }
    my $user = ucfirst lc ($ENV{USER} || '');
    my $cmd = q~grep '^sub' __FILE__ | cut -b5- | sort | awk '{ print "=head3 C<" $1 "($arg1, $arg2, ...)>\n\nToo bad. ~ . $user . q~ was too LAZY to update this documentation.\n" }' 2>/dev/null~;
    $cmd =~ s{__FILE__}{$file};
    my @out = `$cmd`;
    return join ("", @out);
}

1; # End of App::autopod

__END__

=pod

=head1 NAME

App::autopod - The great new App::autopod!

=head1 VERSION

Version 0.01

=head1 SYNOPSIS

Quick summary of what the module does.

Perhaps a little code snippet.

    use App::autopod;

    my $foo = App::autopod->new();
    ...

=head1 EXPORT

A list of functions that can be exported.  You can delete this section
if you don't export anything, such as for a purely object-oriented module.

=head1 FUNCTIONS

=head2 function1

=cut

=head2 function2

=cut

=head1 AUTHOR

Cosimo Streppone, C<< <cosimo at cpan.org> >>

=head1 BUGS

Please report any bugs or feature requests to C<bug-app-autopod at rt.cpan.org>, or through
the web interface at L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=App-autopod>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.


=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc App::autopod


You can also look for information at:

=over 4

=item * RT: CPAN's request tracker

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=App-autopod>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/App-autopod>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/App-autopod>

=item * Search CPAN

L<http://search.cpan.org/dist/App-autopod>

=back


=head1 ACKNOWLEDGEMENTS


=head1 COPYRIGHT & LICENSE

Copyright 2010 Cosimo Streppone, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


=cut

